<?php
/**
 * CarteBlanche - PHP framework package - Composer installer package
 * (c) Pierre Cassat and contributors
 * 
 * Sources <http://github.com/php-carteblanche/installer>
 *
 * License Apache-2.0
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CarteBlancheInstaller;

use \Composer\Composer;
use \Composer\IO\IOInterface;
use \Composer\Autoload\AutoloadGenerator;
use \Composer\Package\PackageInterface;
use \Composer\Repository\RepositoryInterface;
use \Composer\Util\Filesystem;
use \Composer\Script\EventDispatcher;

use \AssetsManager\Config;

use \CarteBlancheInstaller\CarteBlancheInstaller;

/**
 * The application bootstrap generator
 *
 * @author  Piero Wbmstr <me@e-piwi.fr>
 */
class BootstrapGenerator
    extends AutoloadGenerator
{

    protected $composer;
    protected $config;

    public function __construct(Composer $composer, IOInterface $io)
    {
        $this->composer = $composer;
        $this->config = $composer->getConfig();
        parent::__construct($composer->getEventDispatcher());
    }

    public function generate(PackageInterface $mainPackage)
    {
        $filesystem = new Filesystem();
        $vendorDir = $this->config->get('vendor-dir');
        $vendorPath = strtr(realpath($vendorDir), '\\', '/');
        $appBasePath = str_replace($vendorDir, '', $vendorPath);
        $relVendorPath = $filesystem->findShortestPath(getcwd(), $vendorPath, true);

        $bootstrapFile = <<<EOF
<?php

// bootstrap.php generated by CarteBlanche

namespace App\Bootstrap;
use \CarteBlanche\App\Bootstrap\SafeBootstrap;
class ContainerBootstrap extends SafeBootstrap {

    protected \$bundles = array(

EOF;

        $localRepo = $this->composer->getRepositoryManager()->getLocalRepository();
        $packageMap = $this->buildPackageMap($this->composer->getInstallationManager(), $mainPackage, $localRepo->getPackages());
        $autoloads = $this->parseAutoloads($packageMap, $mainPackage);

        foreach ($autoloads['psr-0'] as $namespace => $paths) {
            $exportedPaths = array();
            foreach ($paths as $path) {
                if (strstr($path, 'bundles'))
                {
                    $exportedPaths[] = var_export( trim( str_replace(Config::get('bundle-dir'), '', $path), '/'), 1);
                }
            }
            if (count($exportedPaths)>0) {
                $exportedPrefix = var_export($namespace, true);
                $bootstrapFile .= "        $exportedPrefix => ";
                if (count($exportedPaths) > 1) {
                    $bootstrapFile .= "array(".implode(', ', $exportedPaths)."),\n";
                } else {
                    $bootstrapFile .= $exportedPaths[0].",\n";
                }
            }
        }

        $bootstrapFile .= <<<EOF
    );
    
    protected \$prod_stacks = array(
        'database'          =>'initDatabase'
    );
    
    protected \$dev_stacks = array(
        'database'          =>'initDatabase',
        'unit_test'         =>'initUnitTest'
    );
    
}

EOF;

        return file_put_contents(
            rtrim($appBasePath, '/') . '/' . rtrim(Config::get('config-dir'), '/') . '/bootstrap.php',
            $bootstrapFile);
    }

}

// Endfile